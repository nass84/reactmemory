{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","disabled","className","src","alt","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","congrats","setCongrats","shuffleCards","shuffledCards","sort","Math","random","map","id","useEffect","prevCards","resetTurn","setTimeout","prevTurns","every","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAEe,SAASA,EAAT,GAAgE,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAQhE,OACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAWF,EAAU,UAAY,GAAtC,UACE,qBAAKE,UAAU,QAAQC,IAAKL,EAAKK,IAAKC,IAAI,eAC1C,qBACEF,UAAU,OACVC,IAAI,6BACJE,QAbY,WACdJ,GACJF,EAAaD,IAYPM,IAAI,mBCdd,IAAME,EAAa,CAEjB,CAAE,IAAO,gCAAiCC,SAAS,GACnD,CAAE,IAAO,gCAAiCA,SAAS,GACnD,CAAE,IAAO,8BAA+BA,SAAS,GACjD,CAAE,IAAO,gCAAiCA,SAAS,GACnD,CAAE,IAAO,gCAAiCA,SAAS,GACnD,CAAE,IAAO,+BAAgCA,SAAS,IAkHrCC,MA/Gf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAkCJ,mBAAS,MAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAgCR,oBAAS,GAAzC,mBAAOR,EAAP,KAAiBiB,EAAjB,KACA,EAAgCT,oBAAS,GAAzC,mBAAOU,EAAP,KAAiBC,EAAjB,KAKMC,EAAe,WACnB,IAAMC,EAAgB,UAAIhB,EAAeA,GACtCiB,MAAK,kBAAMC,KAAKC,SAAW,MAC3BC,KAAI,SAAC5B,GAAD,mBAAC,eAAeA,GAAhB,IAAsB6B,GAAIH,KAAKC,cAEtCd,EAASW,GACTT,EAAS,IAKLd,EAAe,SAACD,GAEpBgB,EAAYG,EAAanB,GAAQiB,EAAajB,IAKhD8B,qBAAU,WACJd,GAAaE,IACfE,GAAY,GACRJ,EAAUX,MAAQa,EAAUb,KAC9BQ,GAAS,SAACkB,GACR,OAAOA,EAAUH,KAAI,SAAC5B,GACpB,OAAIA,EAAKK,MAAQW,EAAUX,IAClB,2BAAKL,GAAZ,IAAkBS,SAAS,IAEpBT,QAIbgC,KAGAC,YAAW,kBAAMD,MAAa,QAGjC,CAAChB,EAAWE,IAEf,IAAMc,EAAY,WAChBf,EAAa,MACbE,EAAa,MACbJ,GAAS,SAACmB,GAAD,OAAeA,EAAY,KACpCd,GAAY,IAgCd,OAzBAU,qBAAU,WACRP,IACAN,EAAa,MACbE,EAAa,MACbJ,EAAS,GACTO,GAAY,KACX,IAKHQ,qBAAU,WACJlB,EAAMuB,OAAM,SAACnC,GAAD,OAA2B,IAAjBA,EAAKS,aAC7BwB,YAAW,kBAAMV,MAAgB,KACjCD,GAAY,MAEb,CAACV,IAGJkB,qBAAU,WACJT,GACFY,YAAW,kBAAMX,GAAY,KAAQ,OAEtC,CAACD,IAGF,sBAAKjB,UAAU,MAAf,WACIiB,GAAY,4CACbA,GACC,qBAAIjB,UAAU,WAAd,0DACgDU,EADhD,UAC8D,OAGhE,wBAAQP,QAASgB,EAAjB,sBACA,qBAAKnB,UAAU,YAAf,SACGQ,EAAMgB,KAAI,SAAC5B,GAAD,OACT,cAAC,EAAD,CAEEA,KAAMA,EACNC,aAAcA,EACdC,QAASF,IAASgB,GAAahB,IAASkB,GAAalB,EAAKS,QAC1DN,SAAUA,GAJLH,EAAK6B,SAQhB,wCAAWf,SCnHjBsB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6a8fa32d.chunk.js","sourcesContent":["import \"./SingleCard.css\";\r\n\r\nexport default function SingleCard({ card, handleChoice, flipped, disabled }) {\r\n  \r\n  const handleClick = () => {\r\n    if(!disabled) {\r\n    handleChoice(card);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className={flipped ? \"flipped\" : \"\"}>\r\n        <img className=\"front\" src={card.src} alt=\"card front\" />\r\n        <img\r\n          className=\"back\"\r\n          src=\"/reactmemory/img/cover.png\"\r\n          onClick={handleClick}\r\n          alt=\"card back\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport SingleCard from \"./components/SingleCard\";\r\n\r\nconst cardImages = [\r\n  \r\n  { \"src\": \"/reactmemory/img/helmet-1.png\", matched: false },\r\n  { \"src\": \"/reactmemory/img/potion-1.png\", matched: false },\r\n  { \"src\": \"/reactmemory/img/ring-1.png\", matched: false },\r\n  { \"src\": \"/reactmemory/img/scroll-1.png\", matched: false },\r\n  { \"src\": \"/reactmemory/img/shield-1.png\", matched: false },\r\n  { \"src\": \"/reactmemory/img/sword-1.png\", matched: false },\r\n]\r\n\r\nfunction App() {\r\n  const [cards, setCards] = useState([]);\r\n  const [turns, setTurns] = useState(0);\r\n  const [choiceOne, setChoiceOne] = useState(null);\r\n  const [choiceTwo, setChoiceTwo] = useState(null);\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [congrats, setCongrats] = useState(false);\r\n\r\n\r\n\r\n  //shuffle the cards\r\n  const shuffleCards = () => {\r\n    const shuffledCards = [...cardImages, ...cardImages]\r\n      .sort(() => Math.random() - 0.5)\r\n      .map((card) => ({ ...card, id: Math.random() }));\r\n\r\n    setCards(shuffledCards);\r\n    setTurns(0);\r\n  };\r\n\r\n  // handle a choice\r\n\r\n  const handleChoice = (card) => {\r\n    // if choiceOne is null set card to choice two\r\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\r\n  };\r\n\r\n  // compare 2 selected cards and reset\r\n\r\n  useEffect(() => {\r\n    if (choiceOne && choiceTwo) {\r\n      setDisabled(true);\r\n      if (choiceOne.src === choiceTwo.src) {\r\n        setCards((prevCards) => {\r\n          return prevCards.map((card) => {\r\n            if (card.src === choiceOne.src) {\r\n              return { ...card, matched: true };\r\n            } else {\r\n              return card;\r\n            }\r\n          });\r\n        });\r\n        resetTurn();\r\n      } else {\r\n        // wait a second and flip both cards back over if they dont match\r\n        setTimeout(() => resetTurn(), 1000);\r\n      }\r\n    }\r\n  }, [choiceOne, choiceTwo]);\r\n\r\n  const resetTurn = () => {\r\n    setChoiceOne(null);\r\n    setChoiceTwo(null);\r\n    setTurns((prevTurns) => prevTurns + 1);\r\n    setDisabled(false);\r\n  };\r\n\r\n\r\n\r\n  // Game starts automatically\r\n\r\n  useEffect(() => {\r\n    shuffleCards();\r\n    setChoiceOne(null);\r\n    setChoiceTwo(null);\r\n    setTurns(0);\r\n    setCongrats(false);\r\n  }, []);\r\n\r\n  // If all cards are matched true, reset the game\r\n  // display congratulations message \r\n\r\n  useEffect(() => {\r\n    if (cards.every((card) => card.matched === true)) {\r\n      setTimeout(() => shuffleCards(), 3000);\r\n      setCongrats(true);\r\n    }\r\n  }, [cards]);\r\n\r\n  // If game resets, hide congratulations message\r\n  useEffect(() => {\r\n    if (congrats) {\r\n      setTimeout(() => setCongrats(false), 3000);\r\n    }\r\n  }, [congrats]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {!congrats && <h1>Meah Match</h1>}\r\n      {congrats && (\r\n        <h1 className=\"congrats\">\r\n          Congratulations! You completed Meah Match in {turns} turns!{\" \"}\r\n        </h1>\r\n      )}\r\n      <button onClick={shuffleCards}>New Game</button>\r\n      <div className=\"card-grid\">\r\n        {cards.map((card) => (\r\n          <SingleCard\r\n            key={card.id}\r\n            card={card}\r\n            handleChoice={handleChoice}\r\n            flipped={card === choiceOne || card === choiceTwo || card.matched}\r\n            disabled={disabled}\r\n          />\r\n        ))}\r\n      </div>\r\n      <p>Turns: {turns}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}